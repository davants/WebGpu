WebGpu



	Version 0.008
	
		Done - commit!
	
		ToDo - What Gpu variables need to be stored for each individual object?
		
			Note - SCOPE THIS DOWN for this version. Meaning, don't include the image data yet.
			
			
		Done - Create a group class and another class that holds an array of those group class objects.		
				
		Done - Rename variables and so on because things are a big confusion at the moment.
			For example, the view projection and the model matrix are basically the same names.
			
			Done - Rename the projectview buffer and the  buffer that holds all the model matricies.
			

	Version 0.007
		
		Done - commit!
	
		The new json object group and the contained objects are not being used yet. 
			They are only at the design stage.
		
		Done - Create a list of object groups - Not used yet for graphics... just starting to 
			stub things out. 
			
			The json objects will be returned by a web api.
			
			Meaning, one object can be a group of other objects.
			Each object group will have its own buffer.
		
			The web site will receive a json document that describes the needed objects.
			
			Done - Call the functions in the new dtsutils file. Have a function call a 
				function.
			
			Done - Create my own js util file.
			
			Done - Create a list json doc; hard coded.
			
			

	Version 0.005 
	
		Done - Commit
	
		Done - Get 2 cube working for the texture example.
		
			Create seperate buffer for view project and transformations.
		
			Notes - The texture example does not have two buffers for the model's world space and 
				another for the view projection.

	Version 0.004
	
		Done - Update the cubes.html to support multiple objects.
	
		Done - Working to support 2 objects using the "twoCubes" example.
		
			Done - Create a seperate mvc matrix for the second box.
		
			Done - Increase the size of the uniform buffer to be able to hold two 
				model view projection matricies.
		
			Done - Review both code examples for 1 and 2 objects.
	
		Done - Review "2 Object Example below and compair to existing cube2.html code.

		Done - Find 2 Object Example.
		
			Running Example: https://austineng.github.io/webgpu-samples/?wgsl=0#twoCubes
		
			Code: https://github.com/austinEng/webgpu-samples/blob/master/src/examples/twoCubes.ts

				Or,downloaded "TwoCubesExampleDoesNotRun.ts" which does not run.

	Version 0.003
	
		Done - Great tutorial on model, view and projection matrix.
			http://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices/
			
		Done - Update cube2.html to copy data to the Gpu buffer real-time using map and un-map 
			instead of using the command queue and submitting a command list.
	
		Done - Change what the camera is looking at.
			
			Done - Determin the matrix that holds the camera's information.
			
				Done - Make notes in the cube2.html file.
			
				viewMatrix - has eye position, look at and up direction.
			
			Done - Create another cube html document called cube2.html and 
				copy the code from cube.html to it.
	
		Done - Review cube.html 
	
		Done - Review the "blank.html" project.



	Version 0.002 
	
		Commit version 0.002
	
		Done - Get tutorials running locally. 
		
			https://github.com/tsherif/webgpu-examples#:~:text=WebGPU%20Examples%201%20Blank%3A%20Setting%20up%20a%20swap,buffers%2C%20and%20animating%20a%20cube.%20More%20items...%20
			
			
			
			Done - Get the cube-texture-lighting.html
			
				I need to get the texture somehow.
				
				See running example: https://tsherif.github.io/webgpu-examples/cube-texture-lighting.html
				
				
				
				Done - Add the html file to the local web app.
			
			Done - Add links to all the samples on the main index.html page.
			
			Done - Get the cube.html running locally.
			
				Cube runs and it working correctly:
					Running Sample: https://tsherif.github.io/webgpu-examples/cube.html
				
					Local IIS: https://localhost:44326/cube.html
				
				


	Version 0.001
	
		Commit Version 0.001

		Done - Get the basic example of javascript running. This includes using the async javascript 
			functions.
			
			Done - Get this basic sample running.
				https://developers.google.com/web/updates/2019/08/get-started-with-gpu-compute-on-the-web
			
			
			
				Done - Add to the example so that a javascript view can be created to read from the 
					binary array.
				
			Done - Commit to github
			
			Done - Create a basic web api dot net core app so that there is a way to serve up pages.
			
				Done - Scroll down to the bottom of the tutorial document where it has another link to enable web 
					pages. The section is called "Call the web API with JavaScript", click the link.
					Link: https://docs.microsoft.com/en-us/aspnet/core/tutorials/web-api-javascript?view=aspnetcore-3.1
					
					Follow the steps to enable IIS to support regular web pages.
						
						Update startup.cs file.
					
						Add folder wwwroot and add an index.html page to it.
					
					
				Done - Create the basic web api project using the following tutorial as a guide. You don't 
					need to actually build the tutorial specifc web APIs from the example. Just use it as 
					a guide on what to select when creating a new project. Visual studio will automatically 
					create a basic controller and so on.
					https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-3.1&tabs=visual-studio
			
		Done - Set the flags to use the new Gpu functionality.		

		Done - Download Edge Canary.